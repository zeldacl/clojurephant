subprojects {
  apply plugin: 'dev.clojurephant.clojure'
  apply plugin: 'maven-publish'

  dependencies {
    compileOnly 'org.clojure:clojure:1.10.0'
    compileOnly 'seancorfield:clj-new:0.5.5'
  }

  publishing {
    publications {
      main(MavenPublication) {
        group = project.name
        artifactId = 'clj-template'
        from components.java
      }
    }
  }

  processResources {
    eachFile { details ->
      if (details.name.endsWith('.gradle')) {
        details.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['clojurephant.version': project.version.toString()])
      }
    }
  }

  task newProject(type: JavaExec) {
    workingDir = file("${rootProject.projectDir}/templates-test")
    classpath = files(sourceSets.main.output, configurations.compileClasspath)
    main = 'clojure.main'
    args '-m', 'clj-new.create', project.name, "my.group/sample-${project.name}", '+localplugin'
    doFirst {
      workingDir.mkdirs()
      delete("${workingDir}/sample-${project.name}")
    }
    dependsOn jar
    dependsOn ':clojurephant-tools:publishToMavenLocal'
    dependsOn ':clojurephant-plugin:publishToMavenLocal'
  }

  task verifyGradleVersion(type: Exec, dependsOn: newProject) {
    workingDir = file("${rootProject.projectDir}/templates-test/sample-${project.name}")
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
      executable = 'gradlew.bat'
    } else {
      executable = './gradlew'
    }
    args '--version'

    standardOutput = new ByteArrayOutputStream()
    doLast {
      def out = standardOutput.toString()
      def version = (out =~ /Gradle (\d+\S+)/)[0][1]
      if (org.gradle.util.GradleVersion.version(version) != org.gradle.util.GradleVersion.current()) {
        throw new GradleException("Templates have incorrect Gradle wrapper \"$version\". Run ./copy-wrapper.ps1 to update.")
      }
    }
  }

  check.dependsOn verifyGradleVersion
}
