plugins {
  id 'org.ajoberstar.grgit' version '4.0.2'
  id 'org.ajoberstar.reckon' version '0.12.0'
  id 'com.diffplug.gradle.spotless' version '3.28.1'

  id 'dev.clojurephant.clojure' version '0.5.0' apply false
  id 'org.ajoberstar.stutter' version '0.5.1' apply false
  id 'com.gradle.plugin-publish' version '0.11.0' apply false
}

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
allprojects {
  plugins.withId('java') {
    repositories {
      mavenCentral()
      maven {
        name = 'Clojars'
        url = 'https://repo.clojars.org/'
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Locking
///////////////////////////////////////////////////////////////////////////////
allprojects {
  plugins.withId('java-base') {
    sourceSets.all { sourceSet ->
      configurations[sourceSet.compileClasspathConfigurationName].resolutionStrategy.activateDependencyLocking()
      configurations[sourceSet.runtimeClasspathConfigurationName].resolutionStrategy.activateDependencyLocking()
    }

    task lock {
      doFirst {
        assert gradle.startParameter.writeDependencyLocks
      }
      doLast {
        sourceSets.all { sourceSet ->
          configurations[sourceSet.compileClasspathConfigurationName].resolve()
          configurations[sourceSet.runtimeClasspathConfigurationName].resolve()
        }
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Packaging
///////////////////////////////////////////////////////////////////////////////
allprojects {
  group = 'dev.clojurephant'

  plugins.withId('java') {
    sourceCompatibility = 8

    task sourcesJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Publishing
///////////////////////////////////////////////////////////////////////////////
allprojects {
  plugins.withId('maven-publish') {
    // Publish to following repositories
    publishing {
      repositories {
//        maven {
//          name = 'bintray'
//          url = 'https://api.bintray.com/maven/clojurephant/maven/clojurephant/;publish=1'
//          credentials {
//            username = System.env['BINTRAY_USER']
//            password = System.env['BINTRAY_KEY']
//          }
//        }
//        maven {
//          name = 'clojars'
//          url = 'https://repo.clojars.org'
//          credentials {
//            username = System.env['CLOJARS_USER']
//            password = System.env['CLOJARS_PASSWORD']
//          }
//        }
          maven {
              name = 'local'
              url = uri('../repo')
          }
      }
      publications.withType(MavenPublication) {
        // use static versions in poms
        versionMapping {
          usage('java-api') {
            fromResolutionOf('runtimeClasspath')
          }
          usage('java-runtime') {
            fromResolutionResult()
          }
        }

        pom {
          // include repository info in POM (needed for cljdoc)
          scm {
            connection = 'https://github.com/clojurephant/clojurephant.git'
            developerConnection = 'git@github.com:clojurephant/clojurephant.git'
            url = 'https://github.com/clojurephant/clojurephant'
            if (!version.toString().contains('+')) {
              tag = version.toString()
            }
          }
        }
      }
    }

    // Clojars doesn't support module metadata
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Versioning and Release
///////////////////////////////////////////////////////////////////////////////
reckon {
  scopeFromProp()
  stageFromProp('alpha', 'beta', 'rc', 'final')
}

// make sure tests pass before tagging the version
allprojects {
  tasks.matching { it.name == 'check' }.all { task ->
    rootProject.tasks.reckonTagCreate.dependsOn task
  }
}

///////////////////////////////////////////////////////////////////////////////
// Code Style and Formatting
///////////////////////////////////////////////////////////////////////////////
allprojects {
  apply plugin: 'com.diffplug.gradle.spotless'

  plugins.withId('java') {
    spotless {
      java {
        importOrder 'java', 'javax', ''
        removeUnusedImports()
        eclipse().configFile rootProject.file('gradle/eclipse-java-formatter.xml')
      }
      format('gradle') {
        target '**/*.gradle'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
      }
    }
  }
}
